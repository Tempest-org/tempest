// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	organizationsMembersFieldNames          = builder.RawFieldNames(&OrganizationsMembers{}, true)
	organizationsMembersRows                = strings.Join(organizationsMembersFieldNames, ",")
	organizationsMembersRowsExpectAutoSet   = strings.Join(stringx.Remove(organizationsMembersFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	organizationsMembersRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(organizationsMembersFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	organizationsMembersModel interface {
		Insert(ctx context.Context, data *OrganizationsMembers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrganizationsMembers, error)
		FindOneByOrganizationIdUserId(ctx context.Context, organizationId int64, userId string) (*OrganizationsMembers, error)
		Update(ctx context.Context, data *OrganizationsMembers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrganizationsMembersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrganizationsMembers struct {
		Id             int64        `db:"id"`
		OrganizationId int64        `db:"organization_id"`
		UserId         string       `db:"user_id"`
		Role           string       `db:"role"`
		CreatedAt      time.Time    `db:"created_at"`
		UpdatedAt      time.Time    `db:"updated_at"`
		DeletedAt      sql.NullTime `db:"deleted_at"`
	}
)

func newOrganizationsMembersModel(conn sqlx.SqlConn) *defaultOrganizationsMembersModel {
	return &defaultOrganizationsMembersModel{
		conn:  conn,
		table: `"public"."organizations_members"`,
	}
}

func (m *defaultOrganizationsMembersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrganizationsMembersModel) FindOne(ctx context.Context, id int64) (*OrganizationsMembers, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", organizationsMembersRows, m.table)
	var resp OrganizationsMembers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizationsMembersModel) FindOneByOrganizationIdUserId(ctx context.Context, organizationId int64, userId string) (*OrganizationsMembers, error) {
	var resp OrganizationsMembers
	query := fmt.Sprintf("select %s from %s where organization_id = $1 and user_id = $2 limit 1", organizationsMembersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, organizationId, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizationsMembersModel) Insert(ctx context.Context, data *OrganizationsMembers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, organizationsMembersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrganizationId, data.UserId, data.Role, data.DeletedAt)
	return ret, err
}

func (m *defaultOrganizationsMembersModel) Update(ctx context.Context, newData *OrganizationsMembers) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, organizationsMembersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.OrganizationId, newData.UserId, newData.Role, newData.DeletedAt)
	return err
}

func (m *defaultOrganizationsMembersModel) tableName() string {
	return m.table
}
