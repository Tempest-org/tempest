// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	organizationsInvitationsFieldNames          = builder.RawFieldNames(&OrganizationsInvitations{}, true)
	organizationsInvitationsRows                = strings.Join(organizationsInvitationsFieldNames, ",")
	organizationsInvitationsRowsExpectAutoSet   = strings.Join(stringx.Remove(organizationsInvitationsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	organizationsInvitationsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(organizationsInvitationsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	organizationsInvitationsModel interface {
		Insert(ctx context.Context, data *OrganizationsInvitations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrganizationsInvitations, error)
		FindOneByOrganizationIdEmail(ctx context.Context, organizationId int64, email string) (*OrganizationsInvitations, error)
		Update(ctx context.Context, data *OrganizationsInvitations) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrganizationsInvitationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrganizationsInvitations struct {
		Id              int64        `db:"id"`
		OrganizationId  int64        `db:"organization_id"`
		Email           string       `db:"email"`
		InvitedByUserId string       `db:"invited_by_user_id"`
		InvitedAsRole   string       `db:"invited_as_role"`
		Accepted        bool         `db:"accepted"`
		RespondedAt     sql.NullTime `db:"responded_at"`
		CreatedAt       time.Time    `db:"created_at"`
		UpdatedAt       time.Time    `db:"updated_at"`
		DeletedAt       sql.NullTime `db:"deleted_at"`
	}
)

func newOrganizationsInvitationsModel(conn sqlx.SqlConn) *defaultOrganizationsInvitationsModel {
	return &defaultOrganizationsInvitationsModel{
		conn:  conn,
		table: `"public"."organizations_invitations"`,
	}
}

func (m *defaultOrganizationsInvitationsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrganizationsInvitationsModel) FindOne(ctx context.Context, id int64) (*OrganizationsInvitations, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", organizationsInvitationsRows, m.table)
	var resp OrganizationsInvitations
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizationsInvitationsModel) FindOneByOrganizationIdEmail(ctx context.Context, organizationId int64, email string) (*OrganizationsInvitations, error) {
	var resp OrganizationsInvitations
	query := fmt.Sprintf("select %s from %s where organization_id = $1 and email = $2 limit 1", organizationsInvitationsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, organizationId, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizationsInvitationsModel) Insert(ctx context.Context, data *OrganizationsInvitations) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, organizationsInvitationsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrganizationId, data.Email, data.InvitedByUserId, data.InvitedAsRole, data.Accepted, data.RespondedAt, data.DeletedAt)
	return ret, err
}

func (m *defaultOrganizationsInvitationsModel) Update(ctx context.Context, newData *OrganizationsInvitations) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, organizationsInvitationsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.OrganizationId, newData.Email, newData.InvitedByUserId, newData.InvitedAsRole, newData.Accepted, newData.RespondedAt, newData.DeletedAt)
	return err
}

func (m *defaultOrganizationsInvitationsModel) tableName() string {
	return m.table
}
