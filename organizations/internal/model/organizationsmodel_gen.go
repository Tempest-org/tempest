// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	organizationsFieldNames          = builder.RawFieldNames(&Organizations{}, true)
	organizationsRows                = strings.Join(organizationsFieldNames, ",")
	organizationsRowsExpectAutoSet   = strings.Join(stringx.Remove(organizationsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	organizationsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(organizationsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	organizationsModel interface {
		Insert(ctx context.Context, data *Organizations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Organizations, error)
		FindOneByName(ctx context.Context, name string) (*Organizations, error)
		Update(ctx context.Context, data *Organizations) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrganizationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Organizations struct {
		Id             int64          `db:"id"`
		Name           string         `db:"name"`
		Description    sql.NullString `db:"description"`
		WebsiteUrl     sql.NullString `db:"website_url"`
		PrimaryColor   sql.NullString `db:"primary_color"`
		SecondaryColor sql.NullString `db:"secondary_color"`
		LogoUrl        sql.NullString `db:"logo_url"`
		BackgroundUrl  sql.NullString `db:"background_url"`
		CreatedBy      string         `db:"created_by"`
		CreatedAt      time.Time      `db:"created_at"`
		UpdatedAt      time.Time      `db:"updated_at"`
		DeletedAt      sql.NullTime   `db:"deleted_at"`
	}
)

func newOrganizationsModel(conn sqlx.SqlConn) *defaultOrganizationsModel {
	return &defaultOrganizationsModel{
		conn:  conn,
		table: `"public"."organizations"`,
	}
}

func (m *defaultOrganizationsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrganizationsModel) FindOne(ctx context.Context, id int64) (*Organizations, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", organizationsRows, m.table)
	var resp Organizations
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizationsModel) FindOneByName(ctx context.Context, name string) (*Organizations, error) {
	var resp Organizations
	query := fmt.Sprintf("select %s from %s where name = $1 limit 1", organizationsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizationsModel) Insert(ctx context.Context, data *Organizations) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, organizationsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.WebsiteUrl, data.PrimaryColor, data.SecondaryColor, data.LogoUrl, data.BackgroundUrl, data.CreatedBy, data.DeletedAt)
	return ret, err
}

func (m *defaultOrganizationsModel) Update(ctx context.Context, newData *Organizations) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, organizationsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Name, newData.Description, newData.WebsiteUrl, newData.PrimaryColor, newData.SecondaryColor, newData.LogoUrl, newData.BackgroundUrl, newData.CreatedBy, newData.DeletedAt)
	return err
}

func (m *defaultOrganizationsModel) tableName() string {
	return m.table
}
