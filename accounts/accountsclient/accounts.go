// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: accounts.proto

package accountsclient

import (
	"context"

	"github.com/tempest-org/tempest/accounts/accounts"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChangePasswordRequest  = accounts.ChangePasswordRequest
	ChangePasswordResponse = accounts.ChangePasswordResponse
	LoginRequest           = accounts.LoginRequest
	RefreshRequest         = accounts.RefreshRequest
	RefreshResponse        = accounts.RefreshResponse
	RegisterRequest        = accounts.RegisterRequest
	Request                = accounts.Request
	Response               = accounts.Response
	TokenResponse          = accounts.TokenResponse
	ValidateRequest        = accounts.ValidateRequest
	ValidateResponse       = accounts.ValidateResponse

	Accounts interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*TokenResponse, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*TokenResponse, error)
		Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
		Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	}

	defaultAccounts struct {
		cli zrpc.Client
	}
)

func NewAccounts(cli zrpc.Client) Accounts {
	return &defaultAccounts{
		cli: cli,
	}
}

func (m *defaultAccounts) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := accounts.NewAccountsClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultAccounts) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	client := accounts.NewAccountsClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultAccounts) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	client := accounts.NewAccountsClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultAccounts) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	client := accounts.NewAccountsClient(m.cli.Conn())
	return client.Refresh(ctx, in, opts...)
}

func (m *defaultAccounts) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	client := accounts.NewAccountsClient(m.cli.Conn())
	return client.Validate(ctx, in, opts...)
}

func (m *defaultAccounts) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	client := accounts.NewAccountsClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}
