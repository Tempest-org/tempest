// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountsFieldNames          = builder.RawFieldNames(&Accounts{}, true)
	accountsRows                = strings.Join(accountsFieldNames, ",")
	accountsRowsExpectAutoSet   = strings.Join(stringx.Remove(accountsFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	accountsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(accountsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	accountsModel interface {
		Insert(ctx context.Context, data *Accounts) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Accounts, error)
		FindOneByEmail(ctx context.Context, email string) (*Accounts, error)
		FindOneByPhone(ctx context.Context, phone string) (*Accounts, error)
		FindOneByUsername(ctx context.Context, username string) (*Accounts, error)
		Update(ctx context.Context, data *Accounts) error
		Delete(ctx context.Context, id string) error
	}

	defaultAccountsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Accounts struct {
		Id        string       `db:"id"`
		Email     string       `db:"email"`
		Username  string       `db:"username"`
		Password  string       `db:"password"`
		Phone     string       `db:"phone"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt time.Time    `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
	}
)

func newAccountsModel(conn sqlx.SqlConn) *defaultAccountsModel {
	return &defaultAccountsModel{
		conn:  conn,
		table: `"public"."accounts"`,
	}
}

func (m *defaultAccountsModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAccountsModel) FindOne(ctx context.Context, id string) (*Accounts, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", accountsRows, m.table)
	var resp Accounts
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) FindOneByEmail(ctx context.Context, email string) (*Accounts, error) {
	var resp Accounts
	query := fmt.Sprintf("select %s from %s where email = $1 limit 1", accountsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) FindOneByPhone(ctx context.Context, phone string) (*Accounts, error) {
	var resp Accounts
	query := fmt.Sprintf("select %s from %s where phone = $1 limit 1", accountsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) FindOneByUsername(ctx context.Context, username string) (*Accounts, error) {
	var resp Accounts
	query := fmt.Sprintf("select %s from %s where username = $1 limit 1", accountsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) Insert(ctx context.Context, data *Accounts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, accountsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Email, data.Username, data.Password, data.Phone, data.DeletedAt)
	return ret, err
}

func (m *defaultAccountsModel) Update(ctx context.Context, newData *Accounts) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, accountsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Email, newData.Username, newData.Password, newData.Phone, newData.DeletedAt)
	return err
}

func (m *defaultAccountsModel) tableName() string {
	return m.table
}
