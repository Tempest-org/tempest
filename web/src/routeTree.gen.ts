/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as publicIndexImport } from './routes/(public)/index'
import { Route as protectedPageImport } from './routes/(protected)/page'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create/Update Routes

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const publicIndexRoute = publicIndexImport.update({
  id: '/(public)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const protectedPageRoute = protectedPageImport.update({
  id: '/(protected)/page',
  path: '/page',
  getParentRoute: () => rootRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof authRouteImport
    }
    '/(protected)/page': {
      id: '/(protected)/page'
      path: '/page'
      fullPath: '/page'
      preLoaderRoute: typeof protectedPageImport
      parentRoute: typeof rootRoute
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/page': typeof protectedPageRoute
}

export interface FileRoutesByTo {
  '/': typeof publicIndexRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/page': typeof protectedPageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(protected)/page': typeof protectedPageRoute
  '/(public)/': typeof publicIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/signup' | '/page'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/signup' | '/page'
  id:
    | '__root__'
    | '/(auth)'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(protected)/page'
    | '/(public)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  protectedPageRoute: typeof protectedPageRoute
  publicIndexRoute: typeof publicIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  protectedPageRoute: protectedPageRoute,
  publicIndexRoute: publicIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/(protected)/page",
        "/(public)/"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/login",
        "/(auth)/signup"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx",
      "parent": "/(auth)"
    },
    "/(protected)/page": {
      "filePath": "(protected)/page.tsx"
    },
    "/(public)/": {
      "filePath": "(public)/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
